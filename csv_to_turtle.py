#!/usr/bin/env python3
######################################################
# File: csv_to_turtle.py
# Author: Bart Gajderowicz
# Date: May 6, 2022
# Description:
#   create a turtle (.ttl) file from csv/excel data files
######################################################


import os
from datetime import datetime
from misc_lib import *

import numpy as np
import pandas as pd

import xlsxwriter

filein  = 'unit_tests3.xlsx'
dirin = 'csv'
fileout = 'unit_test3.ttl'
dirout = 'turtle'

class_map = {
    "Organization":"Organization",
    "Funding":"cp:Funding",
    "Service":"cp:Service",
    "Client":"cp:Client",
    'Client Code':"cp:Code",
    'Service Code':"cp:Code",
    "Stakeholder":"cids:Stakeholder",
    "Program":'cp:Program',
    'ImpactModel':'cids:ImpactModel',
    'LogicModel':'cids:LogicModel',
    'Community':'cp:Community',
    'Code':'cids:Code',
    'Characteristic':'cids:Characteristic',
    'PrimitiveCharacteristic':'cids:PrimitiveCharacteristic',
    'CompositeCharacteristic':'cids:CompositeCharacteristic',
    'CommunityCharacteristic':'CommunityCharacteristic',
    'LandArea':'LandArea',
    'Feature':'loc_50871:Feature',
    'OrganizationID':'org:OrganizationID'
}
prop_map = {
    'hasLegalName':'org:hasLegalName',
    'receivedAmount':'cp:receivedAmount',
	'requestedAmount':'cp:requestedAmount',
    'fundersProgram':'cp:fundersProgram',
    'hasProgram':'cids:hasProgram',
    'forProgram':'cp:forProgram',
    'hasImpactModel': 'cids:hasImpactModel',
    'hasService':'cids:hasService',
    'hasCode':'cids:hasCode',
    'forStakeholder':'cids:forStakeholder',
    'locatedIn':'i72:located_in',
    'hasCommunityCharacteristic':'cp:hasCommunityCharacteristic',
    'hasCharacteristic':'cids:hasCharacteristic',
    'hasRequirement':'cp:hasRequirement',
    'hasFocus':'cp:hasFocus',
    'hasLocation':'landuse_50872:hasLocation',
    'satisfiesStakeholder':'cp:satisfiesStakeholder',
    'hasLandArea':'landuse_50872:hasLandArea',
    'hasIdentifier':'org:hasIdentifier',
    'hasStakeholder':'cids:hasStakeholder',
    'hasName':'cids:hasName',
    'hasPart':'oep:hasPart',
    'hasDescription':'cids:hasDescription',
    'hasContributingStakeholder':'cids:hasContributingStakeholder',
    'hasBeneficialStakeholder':'cids:hasBeneficialStakeholder',
    'partOf':'oep:partOf',
    'hasMode':'cp:hasMode',
    'forOrganization':'cids:forOrganization',
    'hasIndicator':'cids:hasIndicator',
    'hasOutcome':'cids:hasOutcome',
    'hasID':'org:hasID',
    'hasNumber':'hasNumber',
}


PREFIX = 'cp'
# @prefix geo:  <http://release.niem.gov/niem/adapters/geospatial/3.0#>.
# w3_org = default_world.get_namespace("http://www.w3.org/ns/org#")
# @prefix gml:  <http://www.opengis.net/gml/3.2#>.
# @prefix loc:  <http://ontology.eil.utoronto.ca/5087/1/SpatialLoc/>.


text = '''
################################################################
# Turtle File Generated by: csv_to_turtle.py
# Date : %s
# github: https://github.com/csse-uoft/csv2turtle
################################################################
'''%(datetime.now().strftime("%B %d, %Y %H:%M:%S"))
text += '''
@prefix act:  <http://ontology.eil.utoronto.ca/tove/activity#>.
@prefix dcat: <http://www.w3.org/ns/dcat#>.
@prefix ic:   <http://ontology.eil.utoronto.ca/tove/icontact#">.
@prefix owl:  <http://www.w3.org/2002/07/owl#>.

@prefix sur: <http://ontology.eil.utoronto.ca/tove/survey#>.
@prefix dqv: <http://www.w3.org/ns/dqv#>.
@prefix qb:  <http://purl.org/linked-data/cube#>.
@prefix dcterms: <http://purl.org/dc/terms#>.
@prefix loc_50871:  <http://ontology.eil.utoronto.ca/5087/1/SpatialLoc/>.
@prefix act_50871: <http://ontology.eil.utoronto.ca/5087/1/Activity#>.
@prefix city_50872: <http://ontology.eil.utoronto.ca/5087/2/City#>.
@prefix cityservice_50872: <http://ontology.eil.utoronto.ca/5087/2/CityService#>.
@prefix landuse_50872: <http://ontology.eil.utoronto.ca/5087/2/LandUse/>.

@prefix time: <http://www.w3.org/2006/time#>.
@prefix oep:  <http://www.w3.org/2001/sw/BestPractices/OEP/SimplePartWhole/part.owl#>.
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix rel:  <http://purl.org/vocab/relationship/> .
@prefix geo:  <http://www.opengis.net/ont/geosparql#>.
@prefix i72:  <http://ontology.eil.utoronto.ca/ISO21972/iso21972#>.
@prefix org:  <http://ontology.eil.utoronto.ca/tove/organization#>.
@prefix cids: <http://ontology.eil.utoronto.ca/cids/cids#>.
@prefix cp:   <http://helpseeker.co/compass#> .
@prefix :     <http://helpseeker.co/compass#> .

<local> rdf:type owl:Ontology ;
    owl:imports <https://github.com/csse-uoft/compass-ontology/releases/download/latest/compass.owl> .

'''

def entity_str(e,prefix=PREFIX):
    e=e.strip()
    return e if ':' in e else "%s:%s"%(prefix,e)
def format_lists(insts, entity=True):
    insts = flatten([s.split(',') for s in insts if s == s])
    insts = list(set([s.strip() for s in insts]))
    if entity:
        insts = [entity_str(s) for s in insts]
    return insts

def format_characteristics_text(inst, chars, prop0='hasCharacteristic'):
    text = ''
    if type(chars) == str:
        # tmp = chars.strip().split()
        tmp = [c.strip() for c in chars.split(',')]

    elif type(chars) == list:
        tmp = chars
        # tmp = ','.join(chars)
        # tmp = ','.join([c.strip() for c in chars])
    else:
        raise ValueError("chars parameter must be a str or a list")
    # if tmp.startswith('Comp-CL-'):
    # tmp = [c.strip() for c in tmp.split(',')]

    for code_text in tmp:
        if code_text != code_text:
            return ''
        elif code_text.startswith('cids:hasCode '):
            code_text = code_text.replace('cids:hasCode ','')
        prop = entity_str(prop_map['hasCode'])
        text1 = None
        if code_text.startswith('Comp-CL-'):
            # providing list of composite char labels
            code_text = entity_str(code_text)
            prop1 = entity_str(prop_map[prop0])
            text += "%s %s %s.\n"%(inst,prop1,code_text)
            klass = entity_str(class_map['CompositeCharacteristic'])
            prop1 = entity_str(prop_map['hasPart'])
            codes = [entity_str('CL-%s'%(c)) for c in re.sub(r'[a-z:]*Comp\-CL\-','',code_text).split('_')]
            text1 = '; '.join(["%s %s"%(prop,c) for c in codes])
            text += "%s rdf:type %s.\n"%(code_text,klass)
            text += "%s %s [%s].\n"%(code_text,prop1,text1)
        elif code_text.startswith('CL-'):
            # providing list of codes
            codes = [entity_str(c.strip()) for c in code_text.split(',')]
            codes.sort()
            if len(codes) == 1:
                klass = entity_str(class_map['PrimitiveCharacteristic'])
                prop1 = entity_str(prop_map[prop0])
                code = codes[0]
                text += "%s %s [%s %s].\n"%(inst,prop1,prop,code)
            elif len(codes) > 1:
                comp_inst = entity_str('Comp-CL-'+'_'.join([re.sub(r'[a-z:]*CL-','',c) for c in codes]))
                klass = entity_str(class_map['CompositeCharacteristic'])
                prop1 = entity_str(prop_map['hasPart'])
                prop0 = entity_str(prop_map[prop0])
                text1 = '; '.join(["%s %s"%(prop,c) for c in codes])
                text += "%s rdf:type %s.\n"%(comp_inst,klass)
                text += "%s %s [%s].\n"%(comp_inst,prop1,text1)
                text += "%s %s %s.\n"%(inst, prop0, comp_inst)

    return text


# Read main Ex ffle
xls = pd.ExcelFile(dirin+'/'+filein)



# stakeholders
df = pd.read_excel(xls,'Stakeholders', header=1)
df = df.dropna(how='all')
sids = []
for _,row in df.iterrows():
    sids.append(row['Stakeholder'].split(','))
sids = list(set(flatten(sids)))
sids.sort()
stakeholders = {}
for sid in sids:
    stakeholders[sid] = {'hasCode':[], "location":np.nan}
for _,row in df.iterrows():
    for sid in row['Stakeholder'].split(','):
        if row['hasCode'] == row['hasCode']:
            for code in [c.strip() for c in row['hasCode'].split(',')]:
                stakeholders[sid]['hasCode'].append(code)
        if row['location'] == row['location']:
            stakeholders[sid]['location'] = row['location']
for k,v in stakeholders.items():
    stakeholders[k]['hasCode'] = list(set(v['hasCode']))

# insert stakeholders
text += "#####################\n# Stakeholders\n####################\n"
for sid,props in stakeholders.items():
    text += "\n# Stakeholder (%s)\n"%(sid)
    sklass = entity_str(class_map["Stakeholder"])
    sinst = entity_str(sid)

    text += "%s rdf:type %s.\n"%(sinst, sklass)
    prop = prop_map['locatedIn']
    if props['location']== props['location']:
        inst = entity_str(props['location'])
        text += "%s %s %s.\n"%(sinst, prop, inst)

    text += format_characteristics_text(sinst, props["hasCode"])

    text += "\n"


# insert Taxonomy and CodeList
text += "#####################\n# Taxonomies\n####################\n"
df = pd.read_excel(xls,'Taxonomies', header=1)
df = df.dropna(how='all')
for _,row in df.iterrows():
    subj, obj = entity_str(row['Class']),entity_str(row['subClassOf'])
    text += "%s rdfs:subClassOf %s.\n"%(subj, obj)

    if row['Instance'] == row['Instance']:
        subj, obj = entity_str(row['Instance']), entity_str(row['Class'])
        text += "%s rdf:type %s;\n"%(subj,obj)

        obj = entity_str(row['CodeValue'])
        prop = prop_map['hasCode']
        text += "   %s %s;\n"%(prop, obj)
        text += ".\n"
    text += "\n"


# Communities
df = pd.read_excel(xls,'Communities', header=1)
df = df.dropna(how='all')
communities = {}
for _,row in df[~df['Community'].isnull()].iterrows():
    comm = row['Community']
    communities[comm] = {}
    chars = []
    for s in [s.strip() for s in row['CommunityCharacteristic'].split(',')]:
        chars.append(s)
    communities[comm]['CommunityCharacteristic'] = list(set(chars))
    communities[comm]['hasNumber'] = row['hasNumber']
    communities[comm]['hasLandArea'] = row['hasLandArea']
    communities[comm]['parcelHasLocation'] = row['parcelHasLocation']

# CityDivition
# cp:Community subClassOf iso5087-2:CityDivision
# ios5087-2:CityDivision iso5087 hasLandArea iso5087-2:LandArea
# iso587-2:LandArea subClassOf iso5078-1:Manifestation
#                 landuse_50872:hasLocation exactly 1 iso5087-1:Feature
# isoFeature subClassOf loc:Feature
# >>>>>> If Feauter was geo:Feature we woudl use the gml:hasIdentifier
#         isoFeature subClassOf geo:Feature
#         geo:Feature gml:identifier "Area1"
text += "#####################\n# Communities\n####################\n"
for comm, props in communities.items():
    inst = entity_str(comm)
    klass = entity_str(class_map['Community'])
    text += "%s rdf:type %s.\n"%(inst,klass)

    if props['hasNumber'] == props['hasNumber']:
        num = float(props['hasNumber'])
        prop = entity_str(prop_map['hasNumber'])
        text += "%s %s %s.\n"%(inst,prop,num)

    land = entity_str(props['hasLandArea'])
    prop = entity_str(prop_map['hasLandArea'])
    text += "%s %s %s.\n"%(inst,prop,land)
 
    laklass = entity_str(class_map['LandArea'])
    text += "%s rdf:type %s;\n"%(land,laklass)
    parcel = entity_str(props['parcelHasLocation'])
    prop = 'landuse_50872:parcelHasLocation'
    text += "   %s %s.\n"%(prop, parcel)

    fklass = entity_str(class_map['Feature'])
    text += "%s rdf:type %s.\n"%(parcel, fklass)

    # Community Char
    cklass = entity_str(class_map['CommunityCharacteristic'])
    compchar_inst = entity_str("%s_CommunityCharacteristic"%(inst))
    text += "%s rdf:type %s.\n"%(compchar_inst, cklass)
    prop = entity_str(prop_map['hasCommunityCharacteristic'])
    text += "%s %s %s.\n"%(inst, prop, compchar_inst)

    # Characteristic
    char_inst = entity_str("%s_Characteristic"%(inst))
    prop = entity_str(prop_map['hasCharacteristic'])
    text += "%s %s %s.\n"%(compchar_inst, prop,char_inst)
    text += format_characteristics_text(char_inst, [','.join(props['CommunityCharacteristic'])])

    text += "\n\n"


# Org properties
text += "#####################\n# Organizations\n####################\n"
df = pd.read_excel(xls,'Organizations', header=1)
df = df.dropna(how='all')
klass = entity_str(class_map["Organization"])
for _,row in df.iterrows():
    idinst = row['hasID']
    text += "# ------------------\n# Org (%s)\n# ------------------\n"%(idinst)
    oinst = entity_str(row['Organization'])
    text += "%s rdf:type %s;\n"%(oinst, klass)

    nminst = row["hasLegalName"]
    prop =   entity_str(prop_map['hasLegalName'])
    text += "   %s \"%s\";\n"%(prop, nminst)

    iminst = row["hasImpactModel"]
    iminst = format_lists([iminst])
    prop =   entity_str(prop_map['hasImpactModel'])
    text += "   %s %s;\n"%(prop, ','.join(iminst))

    iminst = row["hasIndicator"]
    iminst = format_lists([iminst])
    prop =   entity_str(prop_map['hasIndicator'])
    text += "   %s %s;\n"%(prop, ','.join(iminst))

    iminst = row["hasOutcome"]
    iminst = format_lists([iminst])
    prop =   entity_str(prop_map['hasOutcome'])
    text += "   %s %s;\n"%(prop, ','.join(iminst))


    inst = entity_str(idinst)
    prop = entity_str(prop_map["hasID"])
    text += "   %s %s;\n"%(prop, inst)

    text += ".\n"
    # Org hasID
    prop = entity_str(prop_map['hasIdentifier'])
    idklass = entity_str(class_map['OrganizationID'])
    text += "%s rdf:type %s;\n"%(inst, idklass)
    text += "   %s \"%s\".\n"%(prop,idinst)


    # Characteristics
    text += format_characteristics_text(inst, row['hasCharacteristic'])
    text += "\n"




text += "#####################\n# Funding\n####################\n"
df = pd.read_excel(xls,'Funding', header=1)
df = df.dropna(how='all')
klass = entity_str(class_map["Funding"])

for (finst, receivedFrom, fundersProgram, receivedAmount, requestedAmount),grp in df.groupby(['Funding','receivedFrom','fundersProgram','receivedAmount','requestedAmount']):
    finst = entity_str(finst)
    text += "\n# Funding %s ------------------\n"%(finst)
    # generate Funding instances, includes organizations and programs
    fklass = entity_str(class_map["Funding"])
    text += "%s rdf:type %s ;\n"%(finst, fklass)

    prop = entity_str(prop_map['receivedAmount'])
    inst = grp["receivedAmount"]
    text += "   %s %s ;\n"%(prop, receivedAmount)

    prop = entity_str(prop_map['requestedAmount'])
    inst = grp["requestedAmount"]
    text += "   %s %s ;\n"%(prop, requestedAmount)

    prop = entity_str(prop_map['fundersProgram'])
    inst = entity_str(fundersProgram)
    text += "   %s %s ;\n"%(prop, inst)


    insts = format_lists(grp["forProgram"])
    prop = entity_str(prop_map['forProgram'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    if len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    insts = format_lists(grp["forStakeholder"])
    prop = entity_str(prop_map['forStakeholder'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    if len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    text += '.\n'

    text += '\n'


# Logic Models
text += "#####################\n# Logic Models\n####################\n"
df = pd.read_excel(xls,'LogicModels', header=1)
df = df.dropna(how='all')
klass = entity_str(class_map["LogicModel"])
for (lminst, ninst),grp in df.groupby(['LogicModel','hasName']):
    lminst = entity_str(lminst)
    text += "%s rdf:type %s ;\n"%(lminst, klass)

    insts = format_lists(grp["forOrganization"])
    prop = entity_str(prop_map["forOrganization"])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    elif len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    prop = entity_str(prop_map['hasName'])
    text += "   %s \"%s\";\n"%(prop, ninst)

    inst = '; '.join(grp["hasDescription"].unique())
    prop = entity_str(prop_map['hasDescription'])
    text += "   %s \"%s\";\n"%(prop, inst)

    insts = format_lists(grp["hasProgram"])
    prop = entity_str(prop_map["hasProgram"])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    elif len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    insts = format_lists(grp["hasStakeholder"])
    prop = entity_str(prop_map['hasStakeholder'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    elif len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))
    text += ".\n"

    # Characteristic
    text += format_characteristics_text(lminst, format_lists(grp['hasCharacteristic'],entity=False))

    text += "\n"

# Programs
text += "#####################\n# Programs\n####################\n"
df = pd.read_excel(xls,'Programs', header=1)
df = df.dropna(how='all')
klass = entity_str(class_map["Program"])
for (pinst,ninst),grp in df.groupby(['Program','hasName']):
    #################################################
    # generate Program Class and links for Service to Program to and Code
    pinst = entity_str(pinst)
    text += "%s rdf:type %s ;\n"%(pinst, klass)
    prop = entity_str(prop_map['hasName'])
    text += "   %s \"%s\";\n"%(prop, ninst)

    inst = '; '.join(grp["hasDescription"].values)
    prop = entity_str(prop_map['hasDescription'])
    text += "   %s \"%s\";\n"%(prop, inst)

    insts = format_lists(grp["hasService"])
    prop = entity_str(prop_map['hasService'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    if len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    insts = format_lists(grp["hasContributingStakeholder"])
    prop = entity_str(prop_map['hasContributingStakeholder'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    if len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    insts = format_lists(grp["hasBeneficialStakeholder"])
    prop = entity_str(prop_map['hasBeneficialStakeholder'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    if len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    text += ".\n"
    text +="\n"

text += "#####################\n# Services\n####################\n"
df = pd.read_excel(xls,'Services', header=1)
df = df.dropna(how='all')
klass = entity_str(class_map["Service"])
for (sinst,ninst),grp in df.groupby(['Service','hasName']):
    #################################################
    # generate Program Class and links for Service to Program to and Code
    sinst = entity_str(sinst)
    text += "%s rdf:type %s ;\n"%(sinst, klass)

    prop = entity_str(prop_map['hasName'])
    text += "   %s \"%s\";\n"%(prop, ninst)

    inst = '; '.join(grp["hasDescription"].unique())
    prop = entity_str(prop_map['hasDescription'])
    text += "   %s \"%s\";\n"%(prop, inst)

    insts = format_lists(grp["oep:partOf"])
    prop = entity_str(prop_map['partOf'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    elif len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    insts = format_lists(grp["hasCode"])
    prop = entity_str(prop_map['hasCode'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    elif len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    insts = format_lists(grp["hasContributingStakeholder"])
    prop = entity_str(prop_map['hasContributingStakeholder'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    elif len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    insts = format_lists(grp["hasBeneficialStakeholder"])
    prop = entity_str(prop_map['hasBeneficialStakeholder'])
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    if len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))

    insts = format_lists(grp["hasMode"], entity=False)
    insts = ["\"%s\""%(t) for t in insts]
    prop = prop_map['hasMode']
    if len(insts)==1:
        text += "   %s %s;\n"%(prop, insts[0])
    elif len(insts)>1:
        text += "   %s %s;\n"%(prop,', '.join(insts))


    text += ".\n"

    # generate Service hasRequirement to Client Codes
    for r in list(set(grp['hasRequirement'].values)):
        text += format_characteristics_text(sinst, [r], prop0='hasRequirement')
    # generate Service hasFocus to Client Codes
    for r in list(set(grp['hasFocus'].values)):
        text += format_characteristics_text(sinst, [r], prop0='hasFocus')


    text += "\n"



f = open(dirout+'/'+fileout, "w")
f.write(text)
f.close()
